{
  "openapi": "3.1.0",
  "info": {
    "title": "<smart-gadgets/>",
    "description": "Description For smart-gadgets Project",
    "version": "1.0.0"
  },
  "components": {
    "securitySchemes": {
      "Authorization": {
        "type": "apiKey",
        "name": "Authorization",
        "scheme": "bearer",
        "in": "header",
        "description": "User token form authorization: **Bearer [user_token]**"
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "This route for login and register and get all user"
    },
    {
      "name": "NewLetter",
      "description": "This route for Newsletter"
    },
    {
      "name": "Comments",
      "description": "Comment management routes for users and admins"
    },
    {
      "name": "Feedback",
      "description": "Feedback management routes for users and admins"
    },
    {
      "name": "Articles",
      "description": "Articles management routes"
    },
    {
      "name": "Products",
      "description": "Smart gadgets product management and e-commerce operations"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "This api for users signup in site",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "username": "kasra1382",
                  "email": "kasra@email.com",
                  "password": "Aasjdj1254"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfully register"
          },
          "400": {
            "description": "Please enter username, email and password"
          },
          "409": {
            "description": "Email is already registered."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "This api for users login in site",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "email": "kasra@email.com",
                  "password": "Aasjdj1254"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful!"
          },
          "400": {
            "description": "Please enter email and password"
          },
          "404": {
            "description": "Invalid email or password."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "This api for users logout in site",
        "responses": {
          "200": {
            "description": "Logged out successfully!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/guest": {
      "post": {
        "tags": ["Auth"],
        "summary": "This api for users guest in site",
        "responses": {
          "200": {
            "description": "Guest login successful!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/userAll": {
      "get": {
        "tags": ["Auth"],
        "summary": "This api for get all user in site",
        "responses": {
          "200": {
            "description": "get all user"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/user/findOne": {
      "get": {
        "tags": ["Auth"],
        "summary": "This api for get one user by email",
        "responses": {
          "200": {
            "description": "This api has get one user"
          },
          "400": {
            "description": "Email not found."
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/user/remove": {
      "delete": {
        "tags": ["Auth"],
        "summary": "This api for remove user",
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Email not found"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "Email",
            "in": "Email",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/auth/user/update/:id": {
      "put": {
        "tags": ["Auth"],
        "summary": "This api for update User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "username": "kasra1382",
                  "email": "kasra@email.com",
                  "password": "Aasjdj1254"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This post has been successfully update"
          },
          "400": {
            "description": "Please enter username, email and password, ID"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/newLetter/create": {
      "post": {
        "tags": ["NewLetter"],
        "summary": "create NewLetter with Email and send code verify",
        "responses": {
          "200": {
            "description": "Verification code sent to email!"
          },
          "400": {
            "description": "Please enter email"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/newLetter/getall": {
      "get": {
        "tags": ["NewLetter"],
        "summary": "This api for get All NewLetter by email",
        "responses": {
          "200": {
            "description": "This api has get All NewLetter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/newLetter/findOne": {
      "get": {
        "tags": ["NewLetter"],
        "summary": "This api for get one NewLetter by email",
        "responses": {
          "200": {
            "description": "This api has get one NewLetter"
          },
          "400": {
            "description": "Please enter email"
          },
          "404": {
            "description": "Newsletter not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/newLetter/remove": {
      "delete": {
        "tags": ["NewLetter"],
        "summary": "This api for remove Newsletter",
        "responses": {
          "200": {
            "description": "NewLetter deleted successfully"
          },
          "400": {
            "description": "Please enter email"
          },
          "404": {
            "description": "NewLetter not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/newLetter/update": {
      "put": {
        "tags": ["NewLetter"],
        "summary": "This api for update Newsletter",
        "responses": {
          "200": {
            "description": "Email has been successfully updated"
          },
          "400": {
            "description": "Please enter email"
          },
          "404": {
            "description": "Newsletter not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments": {
      "post": {
        "tags": ["Comments"],
        "summary": "Create a new comment",
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["text", "email", "username", "postId"],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Comment text content"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email"
                  },
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "postId": {
                    "type": "string",
                    "description": "ID of the post to comment on"
                  },
                  "parentComment": {
                    "type": "string",
                    "description": "ID of parent comment (for replies)"
                  }
                },
                "example": {
                  "text": "This is a great post!",
                  "email": "user@example.com",
                  "username": "John Doe",
                  "postId": "64f1234567890abcdef12345",
                  "parentComment": null
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "comment": { "type": "object" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Authentication required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/bulk-approve": {
      "post": {
        "tags": ["Comments"],
        "summary": "Bulk approve or reject comments (Admin only)",
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["commentIds", "action"],
                "properties": {
                  "commentIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Array of comment IDs"
                  },
                  "action": {
                    "type": "string",
                    "enum": ["approve", "reject"],
                    "description": "Action to perform"
                  }
                },
                "example": {
                  "commentIds": [
                    "64f1234567890abcdef12345",
                    "64f1234567890abcdef12346"
                  ],
                  "action": "approve"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk operation completed successfully"
          },
          "400": {
            "description": "Invalid input or some comment IDs are invalid"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can perform bulk operations"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/post/{postId}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get all approved comments for a specific post",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "ID of the post"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "comments": { "type": "array" },
                    "count": { "type": "number" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/admin/all": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get all comments for admin management",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by post ID"
          },
          {
            "name": "isApproved",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "Filter by approval status"
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can view all comments"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/{id}/replies": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get replies to a specific comment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Comment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Replies retrieved successfully"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/unapproved": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get all unapproved comments for admin review",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by post ID"
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 },
            "description": "Number of items per page"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "default": "createdAt" },
            "description": "Sort field"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Unapproved comments retrieved successfully"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can view unapproved comments"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/{id}": {
      "patch": {
        "tags": ["Comments"],
        "summary": "Update a comment",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Comment ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Updated comment text"
                  },
                  "isApproved": {
                    "type": "boolean",
                    "description": "Approval status (admin only)"
                  },
                  "isAnswered": {
                    "type": "boolean",
                    "description": "Answer status (admin only)"
                  },
                  "answerText": {
                    "type": "string",
                    "description": "Answer text (admin only)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Delete a comment",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Comment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment and its replies deleted successfully"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "You can only delete your own comments"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/{id}/approve": {
      "patch": {
        "tags": ["Comments"],
        "summary": "Approve or reject a comment (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Comment ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["isApproved"],
                "properties": {
                  "isApproved": {
                    "type": "boolean",
                    "description": "Approval status"
                  }
                },
                "example": {
                  "isApproved": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment approved/rejected successfully"
          },
          "400": {
            "description": "isApproved must be a boolean value"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can approve/reject comments"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/{id}/answer": {
      "patch": {
        "tags": ["Comments"],
        "summary": "Answer a comment (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Comment ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["answerText"],
                "properties": {
                  "answerText": {
                    "type": "string",
                    "description": "Answer text"
                  }
                },
                "example": {
                  "answerText": "Thank you for your comment. We appreciate your feedback."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment answered successfully"
          },
          "400": {
            "description": "Answer text is required and must be a non-empty string"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can answer comments"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["Comments"],
        "summary": "Edit answer to a comment (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Comment ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["answerText"],
                "properties": {
                  "answerText": {
                    "type": "string",
                    "description": "Updated answer text"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Answer updated successfully"
          },
          "400": {
            "description": "Answer text is required or this comment has no answer to edit"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can edit answers"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Remove answer from a comment (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Comment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Answer removed successfully"
          },
          "400": {
            "description": "This comment has no answer to remove"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can remove answers"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "tags": ["Feedback"],
        "summary": "Create a new feedback",
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "text",
                  "firstName",
                  "lastName",
                  "email",
                  "number",
                  "type"
                ],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Feedback text content (10-1000 characters)"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "User's first name (2-50 characters)"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "User's last name (2-50 characters)"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "number": {
                    "type": "string",
                    "description": "Phone number (Iranian format: 09xxxxxxxxx)"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["question", "criticism", "suggestion"],
                    "description": "Type of feedback"
                  }
                },
                "example": {
                  "text": "This is a test feedback for system evaluation. I hope this system helps improve services.",
                  "firstName": "علی",
                  "lastName": "احمدی",
                  "email": "ali.ahmadi@example.com",
                  "number": "09123456789",
                  "type": "suggestion"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "feedback": { "type": "object" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Authentication required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": ["Feedback"],
        "summary": "Get all feedbacks (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["question", "criticism", "suggestion"]
            },
            "description": "Filter by feedback type"
          },
          {
            "name": "isApproved",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "Filter by approval status"
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 },
            "description": "Number of items per page"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "default": "createdAt" },
            "description": "Sort field"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Feedbacks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "feedbacks": { "type": "array" },
                    "statistics": { "type": "object" },
                    "pagination": { "type": "object" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can view all feedback"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/feedback/unapproved": {
      "get": {
        "tags": ["Feedback"],
        "summary": "Get unapproved feedbacks (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["question", "criticism", "suggestion"]
            },
            "description": "Filter by feedback type"
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 },
            "description": "Number of items per page"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "default": "createdAt" },
            "description": "Sort field"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Unapproved feedbacks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "feedbacks": { "type": "array" },
                    "pagination": { "type": "object" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can view unapproved feedback"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/feedback/mine": {
      "get": {
        "tags": ["Feedback"],
        "summary": "Get user's own feedbacks",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["question", "criticism", "suggestion"]
            },
            "description": "Filter by feedback type"
          },
          {
            "name": "isApproved",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "Filter by approval status"
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 },
            "description": "Number of items per page"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "default": "createdAt" },
            "description": "Sort field"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "User's feedbacks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "feedbacks": { "type": "array" },
                    "statistics": { "type": "object" },
                    "pagination": { "type": "object" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/feedback/{id}": {
      "patch": {
        "tags": ["Feedback"],
        "summary": "Update a feedback",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Feedback ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Updated feedback text (10-1000 characters)"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "Updated first name (2-50 characters)"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Updated last name (2-50 characters)"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Updated email address"
                  },
                  "number": {
                    "type": "string",
                    "description": "Updated phone number"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["question", "criticism", "suggestion"],
                    "description": "Updated feedback type"
                  },
                  "isApproved": {
                    "type": "boolean",
                    "description": "Approval status (admin only)"
                  },
                  "answerText": {
                    "type": "string",
                    "description": "Answer text (admin only, 5-500 characters)"
                  }
                },
                "example": {
                  "text": "Updated feedback text",
                  "firstName": "علی",
                  "lastName": "احمدی",
                  "email": "ali.ahmadi@example.com",
                  "number": "09123456789",
                  "type": "question"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "feedback": { "type": "object" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. You can only edit your own feedback"
          },
          "404": {
            "description": "Feedback not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Feedback"],
        "summary": "Delete a feedback",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Feedback ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "You can only delete your own feedback"
          },
          "404": {
            "description": "Feedback not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/feedback/{id}/approve": {
      "patch": {
        "tags": ["Feedback"],
        "summary": "Approve or reject a feedback (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Feedback ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["isApproved"],
                "properties": {
                  "isApproved": {
                    "type": "boolean",
                    "description": "Approval status"
                  }
                },
                "example": {
                  "isApproved": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback approved/rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "feedback": { "type": "object" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can approve/reject feedback"
          },
          "404": {
            "description": "Feedback not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/feedback/{id}/answer": {
      "patch": {
        "tags": ["Feedback"],
        "summary": "Answer a feedback (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Feedback ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["answerText"],
                "properties": {
                  "answerText": {
                    "type": "string",
                    "description": "Answer text (5-500 characters)"
                  }
                },
                "example": {
                  "answerText": "Thank you for your feedback. Our team is reviewing this matter and will take necessary actions soon."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback answered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "feedback": { "type": "object" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access denied. Only admins can answer feedback"
          },
          "404": {
            "description": "Feedback not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/articles": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get all articles",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 }
          },
          {
            "name": "published",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          { "name": "category", "in": "query", "schema": { "type": "string" } },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "default": "createdAt" }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": { "description": "Articles retrieved successfully" }
        }
      }
    },
    "/articles/published": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get published articles",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "default": "createdAt" }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": { "description": "Published articles retrieved successfully" }
        }
      }
    },
    "/articles/unpublished": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get unpublished articles",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "default": "createdAt" }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unpublished articles retrieved successfully"
          }
        }
      }
    },
    "/articles/search": {
      "get": {
        "tags": ["Articles"],
        "summary": "Search articles",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 }
          },
          {
            "name": "published",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": { "description": "Search results retrieved successfully" },
          "400": { "description": "Search query is required" }
        }
      }
    },
    "/articles/category/{category}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get articles by category",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 }
          },
          {
            "name": "published",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": { "description": "Category articles retrieved successfully" }
        }
      }
    },
    "/articles/slug/{slug}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get article by slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Article retrieved successfully" },
          "404": { "description": "Article not found or not published" }
        }
      }
    },
    "/articles/{id}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get article by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Article retrieved successfully" },
          "404": { "description": "Article not found" }
        }
      },
      "put": {
        "tags": ["Articles"],
        "summary": "Update an article",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "slug": { "type": "string" },
                  "summery": { "type": "string" },
                  "category": { "type": "string" },
                  "published": { "type": "boolean" },
                  "coverImage": { "type": "string", "format": "binary" },
                  "contentSections[0][title]": { "type": "string" },
                  "contentSections[0][text]": { "type": "string" },
                  "contentSections[0][image]": {
                    "type": "string",
                    "format": "binary"
                  },
                  "contentSections[0][video]": {
                    "type": "string",
                    "format": "binary"
                  },
                  "contentSections[0][audio]": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Article updated successfully" },
          "404": { "description": "Article not found" }
        }
      },
      "delete": {
        "tags": ["Articles"],
        "summary": "Delete an article",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Article deleted successfully" },
          "404": { "description": "Article not found" }
        }
      }
    },
    "/articles/create": {
      "post": {
        "tags": ["Articles"],
        "summary": "Create a new article",
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "slug",
                  "summery",
                  "category",
                  "coverImage"
                ],
                "properties": {
                  "title": { "type": "string" },
                  "slug": { "type": "string" },
                  "summery": { "type": "string" },
                  "category": { "type": "string" },
                  "published": { "type": "boolean", "default": true },
                  "coverImage": { "type": "string", "format": "binary" },
                  "contentSections[0][title]": { "type": "string" },
                  "contentSections[0][text]": { "type": "string" },
                  "contentSections[0][image]": {
                    "type": "string",
                    "format": "binary"
                  },
                  "contentSections[0][video]": {
                    "type": "string",
                    "format": "binary"
                  },
                  "contentSections[0][audio]": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Article created successfully" },
          "400": { "description": "Validation error" }
        }
      }
    },
    "/articles/{id}/toggle-published": {
      "patch": {
        "tags": ["Articles"],
        "summary": "Toggle article published status",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Article status updated" },
          "404": { "description": "Article not found" }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Get all products with advanced filtering and pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 12 },
            "description": "Number of products per page"
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "هدفون و ایرپاد",
                "ساعت هوشمند",
                "دسته بازی",
                "لوازم جانبی موبایل",
                "اسپیکر بلوتوث",
                "پاوربانک",
                "شارژر بی‌سیم",
                "دستبند هوشمند",
                "عینک هوشمند",
                "دوربین هوشمند"
              ]
            },
            "description": "Filter by product category"
          },
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "سامسونگ",
                "اپل",
                "شیائومی",
                "انکر",
                "جی بی ال",
                "سونی",
                "هواوی",
                "OnePlus",
                "Beats",
                "Bose",
                "AirPods",
                "Galaxy Buds"
              ]
            },
            "description": "Filter by brand"
          },
          {
            "name": "search",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Search in product name, title, and description"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["createdAt", "price.originalPrice", "rating.average"],
              "default": "createdAt"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "pagination": { "type": "object" }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Products"],
        "summary": "Create a new product (Admin only)",
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductInput" }
            }
          }
        },
        "responses": {
          "201": { "description": "Product created successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Authentication required" },
          "403": { "description": "Admin access required" }
        }
      }
    },
    "/products/featured": {
      "get": {
        "tags": ["Products"],
        "summary": "Get featured and best-selling products",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 8 }
          }
        ],
        "responses": {
          "200": { "description": "Featured products retrieved successfully" }
        }
      }
    },
    "/products/discounted": {
      "get": {
        "tags": ["Products"],
        "summary": "Get products with discounts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 8 }
          }
        ],
        "responses": {
          "200": { "description": "Discounted products retrieved successfully" }
        }
      }
    },
    "/products/latest": {
      "get": {
        "tags": ["Products"],
        "summary": "Get latest products",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 8 }
          }
        ],
        "responses": {
          "200": { "description": "Latest products retrieved successfully" }
        }
      }
    },
    "/products/filters": {
      "get": {
        "tags": ["Products"],
        "summary": "Get available filters (categories, brands, price range)",
        "responses": {
          "200": { "description": "Filters retrieved successfully" }
        }
      }
    },
    "/products/slug/{slug}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get product by slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Product retrieved successfully" },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Product retrieved successfully" },
          "404": { "description": "Product not found" }
        }
      },
      "put": {
        "tags": ["Products"],
        "summary": "Update product (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductUpdateInput" }
            }
          }
        },
        "responses": {
          "200": { "description": "Product updated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Authentication required" },
          "403": { "description": "Admin access required" },
          "404": { "description": "Product not found" }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete product (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Product deleted successfully" },
          "401": { "description": "Authentication required" },
          "403": { "description": "Admin access required" },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/products/{id}/stock": {
      "patch": {
        "tags": ["Products"],
        "summary": "Update product stock (Admin only)",
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["stock"],
                "properties": {
                  "stock": { "type": "number", "minimum": 0 },
                  "action": {
                    "type": "string",
                    "enum": ["set", "add", "subtract"],
                    "default": "set"
                  }
                },
                "example": { "stock": 10, "action": "add" }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Stock updated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Authentication required" },
          "403": { "description": "Admin access required" },
          "404": { "description": "Product not found" }
        }
      }
    }
  }
}
